name: App Building and Ci/CD for feature

on:
  push:
    branches: [ feature ]
    paths:
      - 'app/**'
      - '.github/workflows/**'
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:


jobs:
  iSort:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: app
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install isort
    - name: isort
      run: |
        isort . --check-only
  Flake8:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: app
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: flake8
      run: |
        flake8 .
  PyLint:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: app
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install libmariadb3 libmariadb-dev -y
        python -m pip install --upgrade pip
        pip install pylint
        find . -name requirements.txt | xargs -I{} pip install -r {}
    - name: pylint
      run: |
        find . -type f -name "*.py" | xargs pylint
  SonarCloud:
    needs: [iSort, Flake8, PyLint]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=nordz0r
            -Dsonar.projectKey=nordz0r_epam24_diplom
            -Dsonar.python.version=3.9
            -Dsonar.python.coverage.reportPaths=pycoverage.xml
  Build-backend:
    needs: [SonarCloud]
    runs-on: ubuntu-latest
    environment: dev
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO: "covapp-backend"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Login to DockerHub
      run: |
        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
    - name: Build the Docker image
      run: |
        cd app/backend
        docker build -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:latest -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:$(date +%s) .
    - name: ContainerScan
      uses: Azure/container-scan@v0
      with:
        image-name: $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:$(date +%s)
    - name: Docker Push
      run: docker push -a $DOCKERHUB_USERNAME/$DOCKERHUB_REPO
  Build-frontend:
    needs: [SonarCloud]
    runs-on: ubuntu-latest
    environment: dev
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      DOCKERHUB_REPO: "covapp-frontend"
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Login to DockerHub
      run: |
        docker login -u $DOCKERHUB_USERNAME -p $DOCKERHUB_TOKEN
    - name: Build the Docker image
      run: |
        cd app/frontend
        docker build -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:latest -t $DOCKERHUB_USERNAME/$DOCKERHUB_REPO:$(date +%s) .
    - name: Docker Push
      run: docker push -a $DOCKERHUB_USERNAME/$DOCKERHUB_REPO
  # ContainerScan-backend:
  #   needs: [Build-backend]
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   env:
  #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #     DOCKERHUB_REPO: "covapp-backend"
  #   steps:
  #   - name: Container image scan
  #     uses: Azure/container-scan@v0.1
  #     with:
  #       image-name: covapp-backend:latest
  # ContainerScan-frontend:
  #   needs: [Build-frontend]
  #   runs-on: ubuntu-latest
  #   environment: dev
  #   env:
  #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  #     DOCKERHUB_REPO: "covapp-frontend"
  #   steps:
  #   - name: Container image scan
  #     uses: Azure/container-scan@v0.1
  #     with:
  #       image-name: covapp-frontend:latest